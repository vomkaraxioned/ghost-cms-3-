"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.htmlToLexical = void 0;
/* eslint-disable ghost/filenames/match-exported-class */
const lexical_1 = require("lexical");
const headless_1 = require("@lexical/headless");
const html_1 = require("@lexical/html");
const rich_text_1 = require("@lexical/rich-text");
const list_1 = require("@lexical/list");
const link_1 = require("@lexical/link");
const kg_default_nodes_1 = require("@tryghost/kg-default-nodes");
const jsdom_1 = require("jsdom");
const TEXT_NODE_TYPES = ['text', 'extended-text'];
const defaultNodes = [
    // basic HTML nodes
    rich_text_1.HeadingNode,
    link_1.LinkNode,
    list_1.ListItemNode,
    list_1.ListNode,
    rich_text_1.QuoteNode,
    // Koenig nodes
    ...kg_default_nodes_1.DEFAULT_NODES
];
function htmlToLexical(html, options) {
    const defaultEditorConfig = {
        nodes: defaultNodes
    };
    const editorConfig = Object.assign({}, defaultEditorConfig, options?.editorConfig);
    const dom = new jsdom_1.JSDOM(`<body>${html?.trim()}</body>`);
    const editor = (0, headless_1.createHeadlessEditor)(editorConfig);
    editor.update(() => {
        const nodes = (0, html_1.$generateNodesFromDOM)(editor, dom.window.document);
        // $generateNodesFromDOM returns top-level text nodes for any unknown elements
        // which will break `rootNode.append()` so we need to wrap them in a paragraph
        // so contents don't get lost when converting
        const normalizedNodes = nodes.map((node) => {
            if (TEXT_NODE_TYPES.includes(node.getType())) {
                const p = (0, lexical_1.$createParagraphNode)();
                p.append(node);
                return p;
            }
            else {
                return node;
            }
        });
        (0, lexical_1.$getRoot)().clear();
        (0, lexical_1.$getRoot)().append(...normalizedNodes);
    }, { discrete: true });
    const editorState = editor.getEditorState();
    return editorState.toJSON();
}
exports.htmlToLexical = htmlToLexical;
//# sourceMappingURL=html-to-lexical.js.map